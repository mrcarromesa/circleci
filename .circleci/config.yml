orbs:
  slack: circleci/slack@3.4.2
# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

jobs:
  build:
    docker: 
      - image: circleci/node:12.18.0 # the primary container, where your job's commands are run
    working_directory: ~/app
    steps:
      - checkout
      - run: 
          name: Escrever variavel
          command: |
            echo ${APP_VERSION_CODE}
      - run: pwd # run the `echo` command
      - run: ls -a # run the `echo` command
      - run: 
          name: ir para pasta
          command: |
            cd app/server 
            ls -a
            npm install # run the `echo` command
            npm test # run the `echo` command
      - store_artifacts:
          path: ~/app/server/app/server/__tests__/coverage
  deploy:
    docker:
      - image: circleci/node:12.18.0
    environment:
      APP_INCREASE: 2
      APP_V_CODE: << pipeline.number >>
    steps:
      - checkout
      - run: 
          name: Executar Deploy
          command: |
            cd app/server
            echo 'export APP_V_CODEB=$(($APP_V_CODE+1))' >> $BASH_ENV
            echo 'export NR_COMMITS=$(git rev-list --no-merges --count $CIRCLE_BRANCH)' >> $BASH_ENV
            echo ${APP_V_CODEB}
            echo "deploied"
      - run:
          name: Adicionar numero
          command: |
            echo 'export NR_COMMITS=$((NR_COMMITS+APP_INCREASE))' >> $BASH_ENV
      - run:
          name: Obter numero
          command: |
            echo ${APP_V_CODEB}
            echo ${NR_COMMITS}
            echo "finish"
  start:
    docker:
      - image: circleci/node:12.18.0
    steps:
      - checkout
      - run: 
          name: Executar Start
          command: |
            echo "started"
            echo ${APP_V_CODE}
  taging:
    docker:
      - image: circleci/node:12.18.0
    steps:
      - checkout
      - run:
          name: Get version
          command: |
            cd app/
            export PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
            git tag -a ${PACKAGE_VERSION} -m "release ${PACKAGE_VERSION}"
            git push origin master --tags

workflows:
  project:
    jobs:
      - build
      - deploy:
          requires:
            - build
      - start:
          requires:
            - build
      - taging:
          requires:
            - build